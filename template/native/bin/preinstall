#!/usr/bin/env node

var cp = require("child_process"),
    exec = cp.exec,
    path = require("path"),
    fs   = require("fs"),
    util = require("util"),
    sys = require("sys");

var askConfirm = function() {
  var stdin = process.openStdin();

  stdin.addListener("data", function(d) {
      var input = d.toString().toLowerCase();

      if ( input.indexOf("y") == "0" ) {
        process.exit(0)
      } else {
        process.exit(1)
      }

    });
}

var tryAndRun = function(cmd, success, failure, done) {
  exec(cmd, function(err, stdout, stderr) {
    if (err) {
      failure(err, stderr);
    } else {
      success(stdout, stderr);
    }
    if (done !== undefined) {
      done(success);
    }
  });
};
var found = function(dependency) {
  return function() {
    console.log("  Found " + dependency + ", good.");
  };
};
var notFound = function(dependency, instructions) {
  return function() {
    console.log("  ERROR: " + dependency + " not found.");
    if (instructions !== undefined) {
      console.log("");
      for (var i in instructions) {
        console.log("  " + instructions[i]);
      }
    }

    setTimeout(function() {
      console.log("\n\nCheck failed - required components missing!");

      util.print("Do you still want to continue, we might have not detected everything correctly (y/N): ")
      askConfirm();
    }, 500);

  };
};
var pleaseInstall = function(dependency) {
  return ["Please install " + dependency + " and run this installer again."];
};

var checkForPython = function() {
  var rootDir = process.env.SystemDrive || 'C:\\',
      exists = false,
      okCb = found('python');

  if (rootDir[rootDir.length - 1] !== '\\') {
    rootDir += '\\'
  }

  // check from default python path
  var pythonPath = path.resolve(rootDir, 'Python27', 'python.exe')

  exists = fs.existsSync(pythonPath);

  if (!exists) {
    tryAndRun("python -V",
      okCb,
      notFound("command 'python'", pleaseInstall("Python"))
    );
  } else {
    okCb();
  }
}

var checkNPMOwnership = function() {
  var currentUser = process.env['USER'];

  console.log("\n\nChecking $HOME/.npm ownership, that '"+currentUser+"' owns everything...\n");

  var cmdToFindFilesNotOwnedByUser = "find $HOME/.npm \! -user $USER -print";

  cp.exec(cmdToFindFilesNotOwnedByUser, function(error, stdout, stderr) {
    if (error) {
      console.log("Error when running command: " + cmdToFindFilesNotOwnedByUser);
      console.log("The error was:\n");
      console.log(stderr);

      console.log("\nDo you want to continue anyway? (y/N)");
      askConfirm();

      return;
    }

    if (stdout == "") {
      console.log("Your user '"+currentUser+"' owns all files in $HOME/.npm, good.\n\n");
    } else {
      console.log("And it's good that we did this check, because these files:\n");
      console.log(stdout);
      console.log("\nare not owned by '"+currentUser+"', this will cause problems.");
      console.log("Fix this with:\n\n\t$ sudo chown -R "+currentUser+" $HOME/.npm\n\n");
      console.log("We recommend that you abort installation now and run this command to change ownership of those files to your user account.");
      console.log("\nDo not use sudo with node commands. Do you really want to ignore these words of wisdom and continue anyway? (y/N)");
      askConfirm();
    }

  })

}




var checkComponents = function() {
  console.log("Checking for required components ...\n");

  if (process.platform === "win32") {

    tryAndRun("git --version",
      found('git'),
      notFound("command 'git'", pleaseInstall("git")),
      function() {
        checkForPython();
      }
    );

  } else if (process.platform === "darwin") {

    // Require XCode, XCode Command Line Tools and git
    tryAndRun("pkgutil --pkgs='com\.apple\.pkg\.Xcode.*'",
      found("XCode"),
      notFound("XCode", [
        "Install XCode from the App Store.",
        "Then install XCode Command Line Tools:",
        "  XCode -> Preferences -> Downloads -> Command Line Tools",
        "Run this installer again once you have XCode and XCode Command Line Tools installed."
      ]),
      function() {
        tryAndRun("pkgutil --pkg-info=com.apple.pkg.DeveloperToolsCLI",
          found("XCode Command Line Tools"),
          function() {
            tryAndRun("xcode-select -p",
              found("XCode Command Line Tools"),
              notFound("XCode Command Line Tools", [
                "Ensure you have installed XCode.",
                "Then install XCode Command Line Tools:",
                "  XCode -> Preferences -> Downloads -> Command Line Tools",
                "Run this installer again once you have XCode and XCode Command Line Tools installed."
              ])
            );
          },
          function() {
            tryAndRun("git --version",
              found('git'),
              notFound("git", [
                "For Git installation, we recommend using homebrew, see http://mxcl.github.com/homebrew/",
                "Once homebrew is installed, install git with: brew install git",
                "Run this installer again once you have git installed."
              ]),
              function() {
                console.log("\nDependencies ok!");
                checkNPMOwnership();
              }
            );
          }
        );
      }
    );
  } else {
    // Require gcc, make and git
    tryAndRun("gcc -v",
      found("gcc"),
      notFound("gcc", pleaseInstall("gcc")),
      function() {
        tryAndRun("make -v",
          found("make"),
          notFound("make", pleaseInstall("make")),
          function() {
            tryAndRun("git --version",
              found("git"),
              notFound("git", pleaseInstall("git")),
              function() {
                console.log("\nDependencies ok!");
              }
            );
          }
        );
      }
    );
  }
}



var printMessages = function(messages, whenDone) {
  if ( messages.length == 0 ) {
    console.log("");
    whenDone();
    return;
  }

  var first = messages.splice(0, 1)[0];
  process.stdout.write(first + " ");

  setTimeout(function() {
    printMessages(messages, whenDone)
  }, 150);
}

message = "If you have any problems, please visit our forums at http://forums.appgyver.com\n        \nWe are now trying to detect required dependencies and problems. Some dependencies (like dtrace-provider) will print ugly warnings to the screen, but everything will be fine.\n\n  - The AppGyver team (contact@appgyver.com)\n\n"

var packageJSON = require("../package.json");
steroidsVersion = packageJSON.version;

console.log("\n\n\nAppGyver Steroids "+steroidsVersion+" installation\n");

printMessages(message.split(" "), function() {
  console.log("Starting installation in 3 seconds.\n\n");
  setTimeout(checkComponents, 3000);
});
